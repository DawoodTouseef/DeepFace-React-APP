{"ast":null,"code":"var _jsxFileName = \"/media/lenovo/Windows 10/deepface-react-ui/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const facialRecognitionModel = process.env.REACT_APP_FACE_RECOGNITION_MODEL || \"Facenet\";\n  const faceDetector = process.env.REACT_APP_DETECTOR_BACKEND || \"opencv\";\n  const distanceMetric = process.env.REACT_APP_DISTANCE_METRIC || \"cosine\";\n  const serviceEndpoint = process.env.REACT_APP_SERVICE_ENDPOINT;\n  const antiSpoofing = process.env.REACT_APP_ANTI_SPOOFING === \"1\";\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [setBase64Image] = useState('');\n  const [isVerified, setIsVerified] = useState(null);\n  const [identity, setIdentity] = useState(null);\n  const [isAnalyzed, setIsAnalyzed] = useState(null);\n  const [analysis, setAnalysis] = useState([]);\n  const [facialDb, setFacialDb] = useState({});\n  useEffect(() => {\n    const loadFacialDb = async () => {\n      const envVarsWithPrefix = {};\n      for (const key in process.env) {\n        if (key.startsWith(\"REACT_APP_USER_\")) {\n          envVarsWithPrefix[key.replace(\"REACT_APP_USER_\", \"\")] = process.env[key];\n        }\n      }\n      return envVarsWithPrefix;\n    };\n    const fetchFacialDb = async () => {\n      try {\n        const loadedFacialDb = await loadFacialDb();\n        setFacialDb(loadedFacialDb);\n      } catch (error) {\n        console.error('Error loading facial database:', error);\n      }\n    };\n    fetchFacialDb();\n  }, []);\n  useEffect(() => {\n    const video = videoRef.current;\n    if (video) {\n      const getVideo = async () => {\n        try {\n          const stream = await navigator.mediaDevices.getUserMedia({\n            video: true\n          });\n          video.srcObject = stream;\n          await video.play();\n        } catch (err) {\n          console.error(\"Error accessing webcam: \", err);\n        }\n      };\n      getVideo();\n    }\n  }, []);\n  const captureImage = task => {\n    setIsVerified(null);\n    setIdentity(null);\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n    const base64Img = canvas.toDataURL('image/png');\n    setBase64Image(base64Img);\n    if (!base64Img) return;\n    if (task === \"verify\") {\n      verify(base64Img);\n    } else if (task === \"analyze\") {\n      analyze(base64Img);\n    }\n  };\n  const verify = async base64Image => {\n    try {\n      for (const key in facialDb) {\n        const targetEmbedding = facialDb[key];\n        const requestBody = JSON.stringify({\n          model_name: facialRecognitionModel,\n          detector_backend: faceDetector,\n          distance_metric: distanceMetric,\n          align: true,\n          img1_path: base64Image,\n          img2_path: targetEmbedding,\n          enforce_detection: false,\n          anti_spoofing: antiSpoofing\n        });\n        const response = await fetch(`${serviceEndpoint}/verify`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: requestBody\n        });\n        const data = await response.json();\n        if (response.status !== 200) {\n          console.log(data.error);\n          setIsVerified(false);\n          return;\n        }\n        if (data.verified) {\n          setIsVerified(true);\n          setIsAnalyzed(false);\n          setIdentity(key);\n          return;\n        }\n      }\n      setIsVerified(false);\n    } catch (error) {\n      console.error('Exception while verifying image:', error);\n    }\n  };\n  const analyze = async base64Image => {\n    setIsAnalyzed(false);\n    try {\n      const requestBody = JSON.stringify({\n        detector_backend: faceDetector,\n        align: true,\n        img_path: base64Image,\n        enforce_detection: false,\n        anti_spoofing: antiSpoofing\n      });\n      const response = await fetch(`${serviceEndpoint}/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: requestBody\n      });\n      const data = await response.json();\n      if (response.status !== 200) {\n        console.log(data.error);\n        return;\n      }\n      const result = data.results.map(instance => `${instance.age} years old ${instance.dominant_race} ${instance.dominant_gender} with ${instance.dominant_emotion} mood.`);\n      if (result.length > 0) {\n        setIsAnalyzed(true);\n        setIsVerified(null);\n        setAnalysis(result);\n      }\n    } catch (error) {\n      console.error('Exception while analyzing image:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      minHeight: '100vh',\n      textAlign: 'center',\n      backgroundColor: '#282c34',\n      color: 'white'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"DeepFace React App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), isVerified === true && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'green'\n        },\n        children: [\"Verified. Welcome \", identity]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 33\n      }, this), isVerified === false && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: \"Not Verified\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 34\n      }, this), isAnalyzed === true && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'green'\n        },\n        children: analysis.join(\", \")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 33\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        ref: videoRef,\n        style: {\n          width: '100%',\n          maxWidth: '500px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => captureImage('verify'),\n        children: \"Verify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => captureImage('analyze'),\n        children: \"Analyze\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          display: 'none'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"O1crkd5GDyRIA+lychJkdUyTq6k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","App","_s","facialRecognitionModel","process","env","REACT_APP_FACE_RECOGNITION_MODEL","faceDetector","REACT_APP_DETECTOR_BACKEND","distanceMetric","REACT_APP_DISTANCE_METRIC","serviceEndpoint","REACT_APP_SERVICE_ENDPOINT","antiSpoofing","REACT_APP_ANTI_SPOOFING","videoRef","canvasRef","setBase64Image","isVerified","setIsVerified","identity","setIdentity","isAnalyzed","setIsAnalyzed","analysis","setAnalysis","facialDb","setFacialDb","loadFacialDb","envVarsWithPrefix","key","startsWith","replace","fetchFacialDb","loadedFacialDb","error","console","video","current","getVideo","stream","navigator","mediaDevices","getUserMedia","srcObject","play","err","captureImage","task","canvas","context","getContext","width","videoWidth","height","videoHeight","drawImage","base64Img","toDataURL","verify","analyze","base64Image","targetEmbedding","requestBody","JSON","stringify","model_name","detector_backend","distance_metric","align","img1_path","img2_path","enforce_detection","anti_spoofing","response","fetch","method","headers","body","data","json","status","log","verified","img_path","result","results","map","instance","age","dominant_race","dominant_gender","dominant_emotion","length","className","style","display","flexDirection","justifyContent","alignItems","minHeight","textAlign","backgroundColor","color","children","fileName","_jsxFileName","lineNumber","columnNumber","join","ref","maxWidth","onClick","_c","$RefreshReg$"],"sources":["/media/lenovo/Windows 10/deepface-react-ui/src/App.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\n\nfunction App() {\n  const facialRecognitionModel = process.env.REACT_APP_FACE_RECOGNITION_MODEL || \"Facenet\";\n  const faceDetector = process.env.REACT_APP_DETECTOR_BACKEND || \"opencv\";\n  const distanceMetric = process.env.REACT_APP_DISTANCE_METRIC || \"cosine\";\n\n  const serviceEndpoint = process.env.REACT_APP_SERVICE_ENDPOINT;\n  const antiSpoofing = process.env.REACT_APP_ANTI_SPOOFING === \"1\";\n\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  \n  const [setBase64Image] = useState('');\n  const [isVerified, setIsVerified] = useState(null);\n  const [identity, setIdentity] = useState(null);\n  const [isAnalyzed, setIsAnalyzed] = useState(null);\n  const [analysis, setAnalysis] = useState([]);\n  const [facialDb, setFacialDb] = useState({});\n\n  useEffect(() => {\n    const loadFacialDb = async () => {\n      const envVarsWithPrefix = {};\n      for (const key in process.env) {\n        if (key.startsWith(\"REACT_APP_USER_\")) {\n          envVarsWithPrefix[key.replace(\"REACT_APP_USER_\", \"\")] = process.env[key];\n        }\n      }\n      return envVarsWithPrefix;\n    };\n  \n    const fetchFacialDb = async () => {\n      try {\n        const loadedFacialDb = await loadFacialDb();\n        setFacialDb(loadedFacialDb);\n      } catch (error) {\n        console.error('Error loading facial database:', error);\n      }\n    };\n  \n    fetchFacialDb();\n  }, []);\n\n  useEffect(() => {\n    const video = videoRef.current;\n    if (video) {\n      const getVideo = async () => {\n        try {\n          const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n          video.srcObject = stream;\n          await video.play();\n        } catch (err) {\n          console.error(\"Error accessing webcam: \", err);\n        }\n      };\n      getVideo();\n    }\n  }, []);\n\n  const captureImage = (task) => {\n    setIsVerified(null);\n    setIdentity(null);\n\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n    const base64Img = canvas.toDataURL('image/png');\n    setBase64Image(base64Img);\n\n    if (!base64Img) return;\n\n    if (task === \"verify\") {\n      verify(base64Img);\n    } else if (task === \"analyze\") {\n      analyze(base64Img);\n    }\n  };\n\n  const verify = async (base64Image) => {\n    try {\n      for (const key in facialDb) {\n        const targetEmbedding = facialDb[key];\n        const requestBody = JSON.stringify({\n          model_name: facialRecognitionModel,\n          detector_backend: faceDetector,\n          distance_metric: distanceMetric,\n          align: true,\n          img1_path: base64Image,\n          img2_path: targetEmbedding,\n          enforce_detection: false,\n          anti_spoofing: antiSpoofing,\n        });\n\n        const response = await fetch(`${serviceEndpoint}/verify`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: requestBody,\n        });\n\n        const data = await response.json();\n\n        if (response.status !== 200) {\n          console.log(data.error);\n          setIsVerified(false);\n          return;\n        }\n\n        if (data.verified) {\n          setIsVerified(true);\n          setIsAnalyzed(false);\n          setIdentity(key);\n          return;\n        }\n      }\n\n      setIsVerified(false);\n    } catch (error) {\n      console.error('Exception while verifying image:', error);\n    }\n  };\n\n  const analyze = async (base64Image) => {\n    setIsAnalyzed(false);\n    try {\n      const requestBody = JSON.stringify({\n        detector_backend: faceDetector,\n        align: true,\n        img_path: base64Image,\n        enforce_detection: false,\n        anti_spoofing: antiSpoofing,\n      });\n\n      const response = await fetch(`${serviceEndpoint}/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: requestBody,\n      });\n\n      const data = await response.json();\n\n      if (response.status !== 200) {\n        console.log(data.error);\n        return;\n      }\n\n      const result = data.results.map(instance => \n        `${instance.age} years old ${instance.dominant_race} ${instance.dominant_gender} with ${instance.dominant_emotion} mood.`\n      );\n\n      if (result.length > 0) {\n        setIsAnalyzed(true);\n        setIsVerified(null);\n        setAnalysis(result);\n      }\n    } catch (error) {\n      console.error('Exception while analyzing image:', error);\n    }\n  };\n\n  return (\n    <div\n      className=\"App\"\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        minHeight: '100vh',\n        textAlign: 'center',\n        backgroundColor: '#282c34',\n        color: 'white'\n      }}\n    >\n      <header className=\"App-header\">\n        <h1>DeepFace React App</h1>\n        {isVerified === true && <p style={{ color: 'green' }}>Verified. Welcome {identity}</p>}\n        {isVerified === false && <p style={{ color: 'red' }}>Not Verified</p>}\n        {isAnalyzed === true && <p style={{ color: 'green' }}>{analysis.join(\", \")}</p>}\n        <video ref={videoRef} style={{ width: '100%', maxWidth: '500px' }} />\n        <br/><br/>\n        <button onClick={() => captureImage('verify')}>Verify</button>\n        <button onClick={() => captureImage('analyze')}>Analyze</button>\n        <br/><br/>\n        <canvas ref={canvasRef} style={{ display: 'none' }} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}